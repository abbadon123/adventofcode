(ns adventofcode-2019.day10.day-10
  (:require [clojure.test :refer :all]
            [clojure.string :as str]))

(def make-two-point-function
  (memoize
    (fn [[x1 y1] [x2 y2]]
      (let [a (/ (- y2 y1) (- x2 x1))
            b (/ (- (* y1 x2) (* y2 x1)) (- x2 x1))]
        (fn [x] (+ (* a x) b))))))

(defn line [P1 P2] [P1 P2])
(defn P1 [line]
  (first line))
(defn P2 [line]
  (second line))
(defn x [point]
  (first point))
(defn y [point]
  (second point))
(defn x1 [line]
  (x (P1 line)))
(defn x2 [line]
  (x (P2 line)))
(defn y1 [line]
  (y (P1 line)))
(defn y2 [line]
  (y (P2 line)))

(defn vertical? [line]
  (== (x1 line) (x2 line)))

(defn in-range? [line X]
  (let [min-x (min (x1 line) (x2 line))
        max-x (max (x1 line) (x2 line))
        min-y (min (y1 line) (y2 line))
        max-y (max (y1 line) (y2 line))]
    (and
      (<= min-x (first X) max-x)
      (<= min-y (second X) max-y))))

(defn point-is-on-a-line [line X]
  (cond
    (not (in-range? line X)) false
    (or
      (= (P1 line) X)
      (= (P2 line) X)) false
    (vertical? line) true
    :default
    (let [f (make-two-point-function (P1 line) (P2 line))
          y (f (first X))]
      (== y (second X)))))


(defn visible [from to point]
  (let [line (line from to)]
    (not (point-is-on-a-line line point))))

(defn part-1 [asteroids]
  (let [is-visible (fn [from to]
                     (every? (partial visible from to) asteroids))
        [count coord] (apply max-key first
                             (for [from asteroids]
                               (reverse [from (count (filter (partial is-visible from) asteroids))])))]
    [(dec count) coord]))

(defn asteroids [inputstr]
  (let [lines (str/split-lines inputstr)
        height (count lines)
        width (count (first lines))
        asteroids (for [x (range width)
                        y (range height)
                        :when (= "#" (-> lines (get y) (get x) str))]
                    [x y])]
    asteroids)
  )

(comment
  (part-1 (asteroids ".###..#......###..#...#
#.#..#.##..###..#...#.#
#.#.#.##.#..##.#.###.##
.#..#...####.#.##..##..
#.###.#.####.##.#######
..#######..##..##.#.###
.##.#...##.##.####..###
....####.####.#########
#.########.#...##.####.
.#.#..#.#.#.#.##.###.##
#..#.#..##...#..#.####.
.###.#.#...###....###..
###..#.###..###.#.###.#
...###.##.#.##.#...#..#
#......#.#.##..#...#.#.
###.##.#..##...#..#.#.#
###..###..##.##..##.###
###.###.####....######.
.###.#####.#.#.#.#####.
##.#.###.###.##.##..##.
##.#..#..#..#.####.#.#.
.#.#.#.##.##########..#
#####.##......#.#.####."))
  )

(defn angle [[x1 y1] [x2 y2]]
  (let [theta (Math/toDegrees (Math/atan2 (- y2 y1) (- x2 x1)))
        x-theta (if (<= 0 theta 180) theta (+ 360 theta))
        clockwise-x-theta (- 360 x-theta)
        clockwise-y-theta (+ clockwise-x-theta 90)]
    (if (>= clockwise-y-theta 360)
      (- clockwise-y-theta 360)
      clockwise-y-theta)))

(defn part-2 [point input]
  (let [asteroids (remove (partial = point) (asteroids input))
        visible? (fn [from asteroids to]
                   (every? (partial visible from to) asteroids))
        angle-reflected (fn [[x1 y1] [x2 y2]]
                          (angle [x1 (- y1)] [x2 (- y2)]))]
    (loop [asteroids (set asteroids)
           vaporized []]
      (if (<= (count asteroids) 0)
        vaporized
        (recur (apply disj asteroids (filter (partial visible? point asteroids) asteroids))
               (into vaporized (sort-by (partial angle-reflected point) (filter (partial visible? point asteroids) asteroids))))))))

(deftest day10-test
  (testing "part-2"
    (is (=
          (part-2
            [11 13]
            ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
          [[11 12] [12 1] [12 2] [12 4] [12 5] [12 6] [13 0] [12 7] [13 2] [12 8] [14 0] [13 5] [14 2] [13 6] [14 3] [15 0] [14 4] [15 2] [14 5] [16 0] [13 8] [14 6] [15 4] [16 2] [17 0] [14 7] [18 0] [17 2] [16 4] [15 6] [18 1] [14 8] [19 0] [16 5] [13 10] [18 3] [16 6] [19 2] [14 9] [18 4] [15 8] [16 7] [17 6] [18 5] [19 4] [12 12] [19 6] [18 7] [17 8] [16 9] [15 10] [18 8] [17 9] [19 8] [16 10] [13 12] [18 10] [16 11] [19 10] [14 12] [15 12] [17 12] [18 12] [19 12] [12 13] [19 14] [18 14] [17 14] [16 14] [15 14] [18 15] [14 14] [19 16] [16 15] [18 16] [13 14] [18 17] [16 16] [19 18] [14 15] [18 18] [15 16] [17 18] [18 19] [13 15] [15 18] [14 17] [15 19] [14 18] [12 15] [13 18] [12 16] [12 17] [12 18] [12 19] [11 14] [10 19] [10 18] [10 17] [10 16] [9 18] [10 15] [8 18] [7 19] [8 17] [7 18] [10 14] [4 19] [6 17] [7 16] [4 18] [8 15] [1 19] [2 18] [0 19] [9 14] [0 18] [4 16] [6 15] [8 14] [4 15] [7 14] [2 15] [6 14] [5 14] [4 14] [3 14] [2 14] [0 14] [10 13] [1 12] [2 12] [3 12] [4 12] [5 12] [0 11] [1 11] [2 11] [3 11] [8 12] [0 9] [3 10] [6 11] [4 10] [2 9] [0 8] [5 10] [0 7] [4 9] [6 10] [3 8] [0 6] [8 11] [1 6] [4 8] [7 10] [2 6] [6 9] [0 4] [5 8] [4 7] [3 6] [2 5] [1 4] [10 12] [0 1] [1 2] [2 3] [3 4] [4 5] [5 6] [1 1] [7 8] [4 4] [1 0] [5 5] [3 2] [6 6] [3 1] [4 2] [6 5] [8 8] [4 1] [7 6] [6 4] [5 2] [4 0] [10 11] [5 0] [6 2] [7 4] [8 6] [6 1] [9 8] [7 2] [10 10] [7 0] [8 3] [9 6] [8 2] [10 9] [8 0] [9 4] [10 8] [10 7] [9 0] [10 6] [10 3] [10 2] [10 1] [11 11] [13 1] [13 3] [14 1] [15 3] [15 5] [17 5] [14 10] [19 7] [15 11] [19 11] [13 13] [19 15] [17 16] [17 17] [19 19] [15 17] [13 17] [13 19] [11 16] [9 19] [9 17] [9 15] [5 17] [5 16] [1 17] [3 15] [1 15] [9 13] [5 11] [1 9] [3 9] [2 7] [3 7] [9 11] [3 3] [5 3] [9 9] [7 3] [7 1] [9 5] [9 3] [9 1] [11 10] [16 3] [15 9] [17 10] [14 13] [19 17] [11 17] [8 19] [8 16] [2 19] [3 17] [8 13] [2 10] [1 8] [7 9] [6 3] [8 1] [11 9] [17 1] [16 8] [15 13] [7 17] [7 13] [6 8] [5 1] [11 8] [18 6] [16 13] [6 18] [5 13] [5 7] [11 7] [19 5] [5 19] [1 13] [4 6] [11 6] [0 13] [3 5] [11 5] [2 4] [11 4] [1 3] [11 3] [11 2] [11 1]]
          ))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 1))
          [11 12]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 2))
          [12 1]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 3))
          [12 2]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 20))
          [16 0]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 50))
          [16 9]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 100))
          [10 16]))
    (is (=
          (nth
            (part-2
              [11 13]
              ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
            (dec 199))
          [9 6]))
    (is (= (nth
             (part-2
               [11 13]
               ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
             (dec 200))
           [8 2]))
    (is (= (nth
             (part-2
               [11 13]
               ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
             (dec 201))
           [10 9]))
    (is (= (nth
             (part-2
               [11 13]
               ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##")
             (dec 299))
           [11 1]))
    )

  (testing "point on line"
    (is (==
          ((make-two-point-function [0 0] [2 2]) 3)
          3))
    (is (==
          ((make-two-point-function [0 0] [1 0]) 3)
          0))
    (is (==
          ((make-two-point-function [0 0] [3 4]) 0)
          0))
    (is (==
          ((make-two-point-function [0 0] [4 0]) 2)
          0))

    (is (==
          ((make-two-point-function [0 0] [10 0]) 100)
          0))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [1 1])
          true))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [3 3])
          true))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [0 0])
          false))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [10 10])
          false))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [0 10])
          false))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [10 0])
          false))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [11 11])
          false))
    (is (=
          (point-is-on-a-line (line [0 0] [10 10]) [-1 -1])
          false))
    (is (=
          (point-is-on-a-line (line [2 0] [2 2]) [2 1])
          true))
    (is (=
          (point-is-on-a-line (line [2 2] [0 2]) [1 2])
          true))
    (is (=
          (point-is-on-a-line (line [2 2] [1 2]) [1 2])
          false))
    )

  (testing "part-1"
    (is (=
          (part-1 (asteroids "......#.#.\n#..#.#....\n..#######.\n.#.#.###..\n.#..#.....\n..#....#.#\n#..#....#.\n.##.#..###\n##...#..#.\n.#....####"))
          [33 [5 8]]))
    (is (=
          (part-1 (asteroids "#.#...#.#.\n.###....#.\n.#....#...\n##.#.#.#.#\n....#.#.#.\n.##..###.#\n..#...##..\n..##....##\n......#...\n.####.###."))
          [35 [1 2]]))
    (is (=
          (part-1 (asteroids ".#..#..###\n####.###.#\n....###.#.\n..###.##.#\n##.##.#.#.\n....###..#\n..#.#..#.#\n#..#.#.###\n.##...##.#\n.....#.#.."))
          [41 [6 3]]))
    (is (=
          (part-1 (asteroids ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##"))
          [210 [11 13]]))
    )

  (testing "angle"
    (is (==
          (angle [0 0] [0 1])
          0))
    (is (==
          (angle [0 0] [1 1])
          45))
    (is (==
          (angle [0 0] [1 0])
          90))
    (is (==
          (angle [0 0] [1 -1])
          135))
    (is (==
          (angle [0 0] [0 -1])
          180))
    (is (==
          (angle [0 0] [-1 -1])
          225))
    (is (==
          (angle [0 0] [-1 0])
          270))
    (is (==
          (angle [0 0] [-1 1])
          315))
    ))

(run-tests)

(nth
  (part-2
    (second (part-1 (asteroids ".###..#......###..#...#\n#.#..#.##..###..#...#.#\n#.#.#.##.#..##.#.###.##\n.#..#...####.#.##..##..\n#.###.#.####.##.#######\n..#######..##..##.#.###\n.##.#...##.##.####..###\n....####.####.#########\n#.########.#...##.####.\n.#.#..#.#.#.#.##.###.##\n#..#.#..##...#..#.####.\n.###.#.#...###....###..\n###..#.###..###.#.###.#\n...###.##.#.##.#...#..#\n#......#.#.##..#...#.#.\n###.##.#..##...#..#.#.#\n###..###..##.##..##.###\n###.###.####....######.\n.###.#####.#.#.#.#####.\n##.#.###.###.##.##..##.\n##.#..#..#..#.####.#.#.\n.#.#.#.##.##########..#\n#####.##......#.#.####.")))
    ".###..#......###..#...#\n#.#..#.##..###..#...#.#\n#.#.#.##.#..##.#.###.##\n.#..#...####.#.##..##..\n#.###.#.####.##.#######\n..#######..##..##.#.###\n.##.#...##.##.####..###\n....####.####.#########\n#.########.#...##.####.\n.#.#..#.#.#.#.##.###.##\n#..#.#..##...#..#.####.\n.###.#.#...###....###..\n###..#.###..###.#.###.#\n...###.##.#.##.#...#..#\n#......#.#.##..#...#.#.\n###.##.#..##...#..#.#.#\n###..###..##.##..##.###\n###.###.####....######.\n.###.#####.#.#.#.#####.\n##.#.###.###.##.##..##.\n##.#..#..#..#.####.#.#.\n.#.#.#.##.##########..#\n#####.##......#.#.####.")
  (dec 200))
